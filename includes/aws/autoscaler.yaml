doctype: autoscaler
impl: c2aws.autoscaler.AutoScaler
contents:
  name: AutoScaler
  description: Creates and terminates instances in response to load
input:
  # name
  as_name: as-%(platform/short_id)s
  # aws
  region_name: aws/region_name
  zone_name: aws/zone_name
  availability_zones: autoscaler/availability_zones
  default_cooldown: autoscaler/default_cooldown
  desired_capacity: autoscaler/desired_capacity
  health_check_period: autoscaler/health_check_period
  health_check_type: autoscaler/health_check_type
  load_balancers: autoscaler/load_balancers
  max_size: autoscaler/max_size
  min_size: autoscaler/min_size
  #placement_group: autoscaler/placement_group
  #vpc_zone_identifier: autoscaler/vpc_zone_identifier
  scale_up_formula: autoscaler/scale_up_formula
  scale_down_formula: autoscaler/scale_down_formula
  # set dynamically
  keypair_name: aws/key_name
  security_groups: [ aws/security_group_name ]
  # server
  instance_type: server/instance_type
  image_id: server/image_id
output:
  autoscaler/arn: autoscaling_group_arn
contents:
  user_data: |
    #cloud-config

    apt_update: true
    apt_upgrade: true
    byobu_by_default: false

    manage_etc_hosts: True
    hostname: %(server/hostname)s

    packages: [ git-core ]

    # NOTE: called on first boot only
    runcmd:
     # create working/log directories
     - mkdir -p /var/cache/opdemand
     - mkdir -p /var/log/opdemand
     # write out bootstrap script
     - |
       cat > /var/cache/opdemand/ssh-bootstrap <<EOF
       #!/usr/bin/env python
       import json
       import re
       import os
       import subprocess

       # setup ssh variables
       ssh_auth_keys = json.loads(r"""%(json_ssh_authorized_keys)s""")
       ssh_known_hosts = json.loads(r"""%(json_ssh_known_hosts)s""")
       ssh_private_key = json.loads(r"""%(json_ssh_private_key)s""")

       # prepare ssh data
       ssh_data = []
       try:
         if ssh_auth_keys:
           keys = "\n".join(ssh_auth_keys)+"\n"
           ssh_data.append( ("ubuntu", "/home/ubuntu/.ssh/authorized_keys", keys) )
         if ssh_known_hosts:
           fingerprints = "\n".join(ssh_known_hosts)+"\n"
           ssh_data.append( ("ubuntu", "/home/ubuntu/.ssh/known_hosts", fingerprints) )
           ssh_data.append( ("root", "/root/.ssh/known_hosts", fingerprints) )
         if ssh_private_key and str(ssh_private_key[0]).find('--BEGIN') > 0:
             ssh_private_key = ssh_private_key[0]
             key_type = re.findall("^-----BEGIN (...) PRIVATE KEY", ssh_private_key)[0].lower()
             ssh_data.append( ("ubuntu", "/home/ubuntu/.ssh/id_"+key_type, ssh_private_key))
             ssh_data.append( ("root", "/root/.ssh/id_"+key_type, ssh_private_key))
       except:
         pass # write what we have

       # iterate over ssh data and append it to disk
       for user, path, data in ssh_data:
         with open(path, "a") as f:
           if isinstance(data, list):
             for d in data:
               f.write(d)
           else:
             f.write(data)
           subprocess.check_call(["chown", user+":"+user, path])
           subprocess.check_call(["chmod", "0600", path])
       EOF
     - chmod +x /var/cache/opdemand/ssh-bootstrap
     - /var/cache/opdemand/ssh-bootstrap
     # clone server repository
     - git clone --recursive %(server/repository_url)s /var/lib/opdemand
     - |
       for script in `ls /var/lib/opdemand/bin`; do
         ln -fs /var/lib/opdemand/bin/$script /usr/local/bin/$script
       done
