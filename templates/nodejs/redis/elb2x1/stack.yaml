# -*- test-case-name: c2server.tests.platform.RailsPostgresqlElb2x1Test -*-
name: Node.js/Redis 2x1 with ELB
description: >
             Node.js environment consisting of a Key Pair, Security Group, three
             EC2 instances, and a load balancer all powered by configurable GitHub repositories.
             Installs the Redis key/val store on one instance and the Node.js
             web framework on the other two. Sets up the load balancer to 
             listen on 80/tcp and distribute traffic across the two Node servers.
path: nodejs/redis/elb2x1
include: [ aws, base, network, server, puppet, cache, application ]
config:
  network/access_port: 3000
  network/admin_port: 22
  application/repository_url: git://github.com/opdemand/c2-nodejs-helloworld.git
  cache/password: changeme123.
stack:
  - name: Security
    description: Provides security infrastructure
    include: [ ]
    components:
      - type: aws-keypair
        include: [ ]
  - name: Network
    description: Provides network infrastructure
    include: [ ]
    components:
      - type: aws-sg
        include: [ network ]
  - name: Cache
    description: Provides caching services
    include: [ ]
    components:
      - type: aws-instance
        include: [ aws, network, server, puppet, cache ]
        name: Redis
        config:
          server/hostname: redis
          server/build_script: build.sh
          server/deploy_script: deploy.cache.sh
        output:
          cache/host: public_dns_name
    monitor:
      protocol: tcp
      port: 6379
  - name: Application
    description: Provides database services
    include: [ ]
    components:
      - type: aws-instance
        include: [ aws, network, server, puppet, application ]
        name: Node 1
        config:
          server/hostname: node1
          server/build_script: build.sh
          server/deploy_script: deploy.app.sh
        output:
          lb/instances: [ instance_id ]
      - type: aws-instance
        include: [ aws, network, server, puppet, application ]
        name: Node 2
        config:
          server/hostname: node2
          server/build_script: build.sh
          server/deploy_script: deploy.app.sh
        output:
          lb/instances: [ instance_id ]
    monitor:
      protocol: tcp
      port: 80
  - name: Load Balancing
    description: Provides load balancing services
    include: [ ] 
    components:
      - type: aws-elb
        include: [ ] 
        name: ELB
        config:
          lb/listeners: [ "(80, 3000, TCP)" ]
          lb/target: HTTP:3000/
        output:
          network/access_host: dns_name
          network/admin_host: dns_name
    monitor:
      protocol: tcp
      port: 80
      target: dns_name
publish:
  - name: Access URL
    description: URL used to access this service
    template: http://%(network/access_host)s
